// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use BindingFlags;
use Object;
use gobject_ffi as ffi;
use ffi as glib_ffi;
use gobject_ffi;
use object::Downcast;
use object::IsA;
use signal::SignalHandlerId;
use signal::connect;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;
use translate::*;

glib_wrapper! {
    pub struct Binding(Object<ffi::GBinding>);

    match fn {
        get_type => || ffi::g_binding_get_type(),
    }
}

pub trait BindingExt {
    fn get_flags(&self) -> BindingFlags;

    fn get_source(&self) -> Option<Object>;

    fn get_source_property(&self) -> Option<String>;

    fn get_target(&self) -> Option<Object>;

    fn get_target_property(&self) -> Option<String>;

    #[cfg(any(feature = "v2_38", feature = "dox"))]
    fn unbind(&self);

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_source_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_source_property_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn connect_property_target_property_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Binding> + IsA<::object::Object>> BindingExt for O {
    fn get_flags(&self) -> BindingFlags {
        unsafe {
            from_glib(ffi::g_binding_get_flags(self.to_glib_none().0))
        }
    }

    fn get_source(&self) -> Option<Object> {
        unsafe {
            from_glib_none(ffi::g_binding_get_source(self.to_glib_none().0))
        }
    }

    fn get_source_property(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_binding_get_source_property(self.to_glib_none().0))
        }
    }

    fn get_target(&self) -> Option<Object> {
        unsafe {
            from_glib_none(ffi::g_binding_get_target(self.to_glib_none().0))
        }
    }

    fn get_target_property(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::g_binding_get_target_property(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_38", feature = "dox"))]
    fn unbind(&self) {
        unsafe {
            ffi::g_binding_unbind(self.to_glib_none().0);
        }
    }

    fn connect_property_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::flags",
                transmute(notify_flags_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_source_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::source",
                transmute(notify_source_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_source_property_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::source-property",
                transmute(notify_source_property_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_target_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::target",
                transmute(notify_target_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_property_target_property_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::target-property",
                transmute(notify_target_property_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_flags_trampoline<P>(this: *mut gobject_ffi::GBinding, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Binding> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Binding::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_source_trampoline<P>(this: *mut gobject_ffi::GBinding, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Binding> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Binding::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_source_property_trampoline<P>(this: *mut gobject_ffi::GBinding, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Binding> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Binding::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_target_trampoline<P>(this: *mut gobject_ffi::GBinding, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Binding> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Binding::from_glib_borrow(this).downcast_unchecked())
}

unsafe extern "C" fn notify_target_property_trampoline<P>(this: *mut gobject_ffi::GBinding, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<Binding> {
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&Binding::from_glib_borrow(this).downcast_unchecked())
}
