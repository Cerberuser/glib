// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
//
// FIXME: This needs to be properly autogenerated but GIR only supports
// on C library per crate currently.

use Object;
use ffi;
use ::signal::SignalHandlerId;
use ::signal::connect;
use ::translate::*;
use ::StaticType;
use ::Type;
use ::value::FromValue;
use ::value::FromValueOptional;
use ::value::SetValue;
use ::value::Value;
use ffi as glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem;
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct Binding(Object<gobject_ffi::GBinding>);

    match fn {
        get_type => || gobject_ffi::g_binding_get_type(),
    }
}

impl Binding {
    pub fn get_flags(&self) -> BindingFlags {
        unsafe {
            from_glib(gobject_ffi::g_binding_get_flags(self.to_glib_none().0))
        }
    }

    pub fn get_source(&self) -> Option<Object> {
        unsafe {
            from_glib_none(gobject_ffi::g_binding_get_source(self.to_glib_none().0))
        }
    }

    pub fn get_source_property(&self) -> Option<String> {
        unsafe {
            from_glib_none(gobject_ffi::g_binding_get_source_property(self.to_glib_none().0))
        }
    }

    pub fn get_target(&self) -> Option<Object> {
        unsafe {
            from_glib_none(gobject_ffi::g_binding_get_target(self.to_glib_none().0))
        }
    }

    pub fn get_target_property(&self) -> Option<String> {
        unsafe {
            from_glib_none(gobject_ffi::g_binding_get_target_property(self.to_glib_none().0))
        }
    }

    #[cfg(any(feature = "v2_38", feature = "dox"))]
    pub fn unbind(&self) {
        unsafe {
            gobject_ffi::g_binding_unbind(self.to_glib_none().0);
        }
    }

    pub fn connect_property_flags_notify<F: Fn(&Binding) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Binding) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::flags",
                transmute(notify_flags_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_source_notify<F: Fn(&Binding) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Binding) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::source",
                transmute(notify_source_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_source_property_notify<F: Fn(&Binding) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Binding) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::source-property",
                transmute(notify_source_property_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_target_notify<F: Fn(&Binding) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Binding) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::target",
                transmute(notify_target_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_property_target_property_notify<F: Fn(&Binding) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe {
            let f: Box_<Box_<Fn(&Binding) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::target-property",
                transmute(notify_target_property_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn notify_flags_trampoline(this: *mut gobject_ffi::GBinding, _param_spec: ffi::gpointer, f: ffi::gpointer) {
    let f: &&(Fn(&Binding) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_source_trampoline(this: *mut gobject_ffi::GBinding, _param_spec: ffi::gpointer, f: ffi::gpointer) {
    let f: &&(Fn(&Binding) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_source_property_trampoline(this: *mut gobject_ffi::GBinding, _param_spec: ffi::gpointer, f: ffi::gpointer) {
    let f: &&(Fn(&Binding) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_target_trampoline(this: *mut gobject_ffi::GBinding, _param_spec: ffi::gpointer, f: ffi::gpointer) {
    let f: &&(Fn(&Binding) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

unsafe extern "C" fn notify_target_property_trampoline(this: *mut gobject_ffi::GBinding, _param_spec: ffi::gpointer, f: ffi::gpointer) {
    let f: &&(Fn(&Binding) + 'static) = transmute(f);
    f(&from_glib_borrow(this))
}

bitflags! {
    pub struct BindingFlags: u32 {
        const DEFAULT = 0;
        const BIDIRECTIONAL = 1;
        const SYNC_CREATE = 2;
        const INVERT_BOOLEAN = 4;
    }
}

#[doc(hidden)]
impl ToGlib for BindingFlags {
    type GlibType = gobject_ffi::GBindingFlags;

    fn to_glib(&self) -> gobject_ffi::GBindingFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<gobject_ffi::GBindingFlags> for BindingFlags {
    fn from_glib(value: gobject_ffi::GBindingFlags) -> BindingFlags {
        BindingFlags::from_bits_truncate(value)
    }
}

impl StaticType for BindingFlags {
    fn static_type() -> Type {
        unsafe { from_glib(gobject_ffi::g_binding_flags_get_type()) }
    }
}

impl<'a> FromValueOptional<'a> for BindingFlags {
    unsafe fn from_value_optional(value: &Value) -> Option<Self> {
        Some(FromValue::from_value(value))
    }
}

impl<'a> FromValue<'a> for BindingFlags {
    unsafe fn from_value(value: &Value) -> Self {
        from_glib(gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl SetValue for BindingFlags {
    unsafe fn set_value(value: &mut Value, this: &Self) {
        gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, this.to_glib())
    }
}

